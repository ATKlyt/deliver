<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.deliver.dao.UserDao">
  <resultMap id="BaseResultMap" type="cn.deliver.domain.User">
    <!--@mbg.generated-->
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="auth_id" jdbcType="VARCHAR" property="authId" />
    <result column="phone" jdbcType="VARCHAR" property="phone" />
    <result column="password" jdbcType="VARCHAR" property="password" />
    <result column="role" jdbcType="VARCHAR" property="role" />
    <result column="status" jdbcType="VARCHAR" property="status" />
    <result column="email" jdbcType="VARCHAR" property="email" />
    <result column="register_time" jdbcType="TIMESTAMP" property="registerTime" />
    <result column="register_role" jdbcType="VARCHAR" property="registerRole" />
    <result column="register_area" jdbcType="VARCHAR" property="registerArea" />
    <result column="evidence" jdbcType="VARCHAR" property="evidence" />
  </resultMap>
  <resultMap id="UserAndDriverMap" type="cn.deliver.domain.UserDriverInfo">
    <association property="user" javaType="cn.deliver.domain.User">
      <id column="id" property="id" />
      <result column="auth_id" property="authId" />
      <result column="password" property="password" />
      <result column="status" property="status"/>
      <result column="role" property="role" />
      <result column="phone" property="phone" />
      <result column="register_area"  property="registerArea" />
      <result column="register_time"  property="registerTime" />
      <result column="register_role"  property="registerRole" />
      <result column="email" property="email" />
    </association>
    <association property="userInfo" javaType="cn.deliver.domain.UserInfo">
      <id column="user_id" property="id"/>
      <result column="uid" property="uid"/>
      <result column="name" property="name"/>
      <result column="gender" property="gender"/>
      <result column="birthday" property="birthday"/>
      <result column="avatar" property="avatar"/>
    </association>
    <association property="driverInfo" javaType="cn.deliver.domain.DriverInfo">
      <id column="drive_id" property="id"/>
      <result column="uiid" property="uiid"/>
      <result column="car_type" property="carType"/>
      <result column="driving_licence_picture" property="drivingLicencePicture"/>
      <result column="car_picture" property="carPicture"/>
      <result column="running_route" property="runningRoute"/>
      <result column="order_number" property="orderNumber"/>
      <result column="car_number" property="carNumber"/>
      <result column="status" property="status"/>
    </association>
  </resultMap>

  <sql id="Base_Column_List">
    <!--@mbg.generated-->
    id, auth_id, phone, `password`, `role`, `status`, email, register_time, register_role,
    register_area, evidence
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    <!--@mbg.generated-->
    select
    <include refid="Base_Column_List" />
    from user
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    <!--@mbg.generated-->
    delete from user
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" keyColumn="id" keyProperty="id" parameterType="cn.deliver.domain.User" useGeneratedKeys="true">
    <!--@mbg.generated-->
    insert into user (auth_id, phone, `password`,
    `role`, `status`, email,
    register_time, register_role, register_area,
    evidence)
    values (#{authId,jdbcType=VARCHAR}, #{phone,jdbcType=VARCHAR}, #{password,jdbcType=VARCHAR},
    #{role,jdbcType=VARCHAR}, #{status,jdbcType=VARCHAR}, #{email,jdbcType=VARCHAR},
    #{registerTime,jdbcType=TIMESTAMP}, #{registerRole,jdbcType=VARCHAR}, #{registerArea,jdbcType=VARCHAR},
    #{evidence,jdbcType=VARCHAR})
  </insert>
  <insert id="insertSelective" keyColumn="id" keyProperty="id" parameterType="cn.deliver.domain.User" useGeneratedKeys="true">
    <!--@mbg.generated-->
    insert into user
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="authId != null">
        auth_id,
      </if>
      <if test="phone != null">
        phone,
      </if>
      <if test="password != null">
        `password`,
      </if>
      <if test="role != null">
        `role`,
      </if>
      <if test="status != null">
        `status`,
      </if>
      <if test="email != null">
        email,
      </if>
      <if test="registerTime != null">
        register_time,
      </if>
      <if test="registerRole != null">
        register_role,
      </if>
      <if test="registerArea != null">
        register_area,
      </if>
      <if test="evidence != null">
        evidence,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="authId != null">
        #{authId,jdbcType=VARCHAR},
      </if>
      <if test="phone != null">
        #{phone,jdbcType=VARCHAR},
      </if>
      <if test="password != null">
        #{password,jdbcType=VARCHAR},
      </if>
      <if test="role != null">
        #{role,jdbcType=VARCHAR},
      </if>
      <if test="status != null">
        #{status,jdbcType=VARCHAR},
      </if>
      <if test="email != null">
        #{email,jdbcType=VARCHAR},
      </if>
      <if test="registerTime != null">
        #{registerTime,jdbcType=TIMESTAMP},
      </if>
      <if test="registerRole != null">
        #{registerRole,jdbcType=VARCHAR},
      </if>
      <if test="registerArea != null">
        #{registerArea,jdbcType=VARCHAR},
      </if>
      <if test="evidence != null">
        #{evidence,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="cn.deliver.domain.User">
    <!--@mbg.generated-->
    update user
    <set>
      <if test="authId != null">
        auth_id = #{authId,jdbcType=VARCHAR},
      </if>
      <if test="phone != null">
        phone = #{phone,jdbcType=VARCHAR},
      </if>
      <if test="password != null">
        `password` = #{password,jdbcType=VARCHAR},
      </if>
      <if test="role != null">
        `role` = #{role,jdbcType=VARCHAR},
      </if>
      <if test="status != null">
        `status` = #{status,jdbcType=VARCHAR},
      </if>
      <if test="email != null">
        email = #{email,jdbcType=VARCHAR},
      </if>
      <if test="registerTime != null">
        register_time = #{registerTime,jdbcType=TIMESTAMP},
      </if>
      <if test="registerRole != null">
        register_role = #{registerRole,jdbcType=VARCHAR},
      </if>
      <if test="registerArea != null">
        register_area = #{registerArea,jdbcType=VARCHAR},
      </if>
      <if test="evidence != null">
        evidence = #{evidence,jdbcType=VARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="cn.deliver.domain.User">
    <!--@mbg.generated-->
    update user
    set auth_id = #{authId,jdbcType=VARCHAR},
    phone = #{phone,jdbcType=VARCHAR},
    `password` = #{password,jdbcType=VARCHAR},
    `role` = #{role,jdbcType=VARCHAR},
    `status` = #{status,jdbcType=VARCHAR},
    email = #{email,jdbcType=VARCHAR},
    register_time = #{registerTime,jdbcType=TIMESTAMP},
    register_role = #{registerRole,jdbcType=VARCHAR},
    register_area = #{registerArea,jdbcType=VARCHAR},
    evidence = #{evidence,jdbcType=VARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>

  <!-- 模糊查询 -->
  <select id="abstractQuery" parameterType="java.lang.String" resultMap="UserAndDriverMap">
    select
    u.id,
    u.auth_id,
    u.phone,
    u.role,
    u.email,
    ui.id user_id,
    ui.name,
    ui.avatar
    from user u,user_info ui
    where u.status = 1 and u.id = ui.uid and ( u.auth_id like '%${info}%' or u.phone like '%${info}%' or u.register_area like '%${info}%' or u.email like '%${info}%'
    or ui.name like '%${info}%' or u.role like '%${info}%' or ui.gender like '%${info}%' )
  </select>

  <!--<select id="abstractQueryByDriver" parameterType="java.lang.String" resultMap="UserAndDriverMap">-->
  <!--select-->
  <!--u.id,-->
  <!--u.auth_id,-->
  <!--u.phone,-->
  <!--u.role,-->
  <!--u.email,-->
  <!--ui.id user_id,-->
  <!--ui.name,-->
  <!--ui.avatar,-->
  <!--di.car_type,-->
  <!--di.car_type-->
  <!--from user u,user_info ui-->
  <!--where u.id = ui.uid and ui.id = di.uiid and  u.auth_id like '%${info}%' or u.phone like '%${info}%' or u.register_area like '%${info}%' or u.email like '%${info}%'-->
  <!--or ui.name like '%${info}%' or u.role like '%${info}%' or ui.gender like '%${info}%'-->
  <!--</select>-->

  <!-- 查询所有的用户信息 -->
  <select id="findAllUser"  resultMap="UserAndDriverMap">
        select * from user
    </select>
  <!-- 查询两个表格中的某些片段 -->
  <select id="findCommonUser" resultMap="UserAndDriverMap">
        select * from user u,user_info ui where u.id= ui.uid
    </select>
  <!-- 插入 -->
  <insert id="insertUser" parameterType="cn.deliver.domain.User" useGeneratedKeys="true" keyProperty="id">
    insert into user(auth_id,password,phone,status,role,register_time,register_area,register_role,email)
    values (#{authId},#{password},#{phone},#{status},#{role},#{registerTime},#{registerArea},#{registerRole},#{email})
  </insert>
  <!-- 审核提交状态 -->
  <update id="updateUserStatus"  >
    update user set status = #{status} , role = #{role}  where  id = #{id}
  </update>
  <!-- 查询审核为用户状态信息 -->
  <select id="examineFindUser" parameterType="cn.deliver.domain.User"  resultMap="UserAndDriverMap">
    SELECT * FROM user u, user_info ui WHERE u.register_role = #{registerRole} and u.status= #{status} and u.id = ui.uid
  </select>
  <!-- 查询审核为用户状态信息 -->
  <select id="examineFindDriver" parameterType="cn.deliver.domain.User" resultMap="UserAndDriverMap">
    SELECT * FROM user u, user_info ui ,driver_info di WHERE u.register_role = #{registerRole} and u.status=#{status} and u.id = ui.uid and ui.id = di.uiid
  </select>
  <select id="findByAuthId" resultMap="BaseResultMap">
    select * from user where auth_id = #{authId,jdbcType=VARCHAR}   ;
  </select>
  <!--检测手机号码是否已被注册-->
  <select id="checkPhoneNumber" resultType="java.lang.Integer">
    select id from user where phone = #{phoneNumber}
  </select>
  <!--用户注册(提交基本信息)-->
  <insert id="register" parameterType="cn.deliver.domain.User" useGeneratedKeys="true" keyProperty="id">
    insert into user
    (auth_id,phone,password,status,register_time,register_area,register_role
    <if test="evidence != null">
      ,evidence
    </if>)
    values
    (#{authId},#{phone},#{password},#{status},#{registerTime},#{registerArea},#{registerRole}
    <if test="evidence != null">
      ,#{evidence}
    </if>)
  </insert>
  <!--用户登录(系统发放id以及手机号码均可登录)-->
  <select id="login" resultMap="BaseResultMap">
    select id,auth_id,phone,role,register_role from user where password = #{password} and
    <if test="length==10">
      auth_id =
    </if>
    <if test="length==11">
      phone =
    </if>
    #{id}
  </select>
  <select id="findPhoneByUid" resultType="java.lang.String">
    select phone from user where id = #{cid,jdbcType=INTEGER}
  </select>
  <!--通过authId来获取对应的手机号码-->
  <select id="findPhoneNumberByAuthId" resultType="java.lang.String">
    select phone from user where auth_id = #{authId}
  </select>
  <update id="updatePassword">
    update user set password = #{password} where phone = #{phone}
  </update>
    <select id="findNameAndPhoneByUid" resultType="cn.deliver.domain.UserRelated">
      select u.id ,ui.name ,u.phone from user AS u ,user_info AS ui
      where ui.uid = u.id and u.id = #{uid,jdbcType=INTEGER}
    </select>
</mapper>